{"version":3,"file":"URDFExporter.js","sources":["../src/URDFExporter.js"],"sourcesContent":["/**\n * @author Garrett Johnson / http://gkjohnson.github.io/\n * https://github.com/gkjohnson/urdf-exporter\n */\n\nimport * as THREE from 'three';\nimport { STLExporter } from 'three/examples/js/loaders/STLExporter';\nimport { ColladaExporter } from 'three/examples/js/loaders/ColladaExporter';\n\n// THREE.js URDF Exporter\n// http://wiki.ros.org/urdf/XML/\n\nexport default\nclass URDFExporter {\n\n    // joint func returns\n    // {\n    //   name\n    //   type\n    //   limit: { lower, upper, velocity, effort }\n    //   axis\n    //   isLeaf\n    // }\n\n    // mesh func returns\n    // {\n    //   name,\n    //   ext,\n    //   data\n    // }\n\n    get STLExporter() {\n\n        return this._stlExporter = this._stlExporter || new STLExporter();\n\n    }\n\n    get ColladaExporter() {\n\n        return this._colladaExporter = this._colladaExporter || new ColladaExporter();\n\n    }\n\n    // Makes the provided name unique.\n    // 'map' is an object with keys of already taken names\n    _makeNameUnique(name, map, appendNum = 0) {\n\n        const newName = `${ name }${ appendNum || '' }`;\n        return newName in map ? this._makeNameUnique(name, map, appendNum + 1) : newName;\n\n    }\n\n    // Fix duplicate slashes in a file path\n    _normalizePackagePath(path) {\n\n        return path\n            .replace(/[\\\\/]+/g, '/')\n            .replace(/^package:\\/*/i, 'package://');\n\n    }\n\n    // The default callback for generating mesh data from a link\n    _defaultMeshCallback(o, linkName, meshFormat) {\n\n        if (meshFormat === 'stl') {\n\n            return {\n                name: linkName,\n                ext: 'stl',\n                data: this.STLExporter.parse(o, { binary: true }),\n                textures: [],\n                material: {\n\n                    color: o.material ? o.material.color : null,\n                    opacity: o.material && o.material.transparent ? o.material.opacity : null,\n                    texture: o.material ? o.material.map : null,\n\n                },\n            };\n\n        } else {\n\n            // TODO: dedupe the textures here\n            const res = this.ColladaExporter.parse(o, { textureDirectory: 'textures' });\n            res.textures.forEach((tex, i) => {\n\n                const newname = `${ linkName }-${ i }`;\n                const nameregex = new RegExp(`${ tex.name }\\\\.${ tex.ext }`, 'g');\n\n                res.data = res.data.replace(nameregex, `${ newname }.${ tex.ext }`);\n                tex.name = newname;\n\n            });\n\n            return {\n                name: linkName,\n                ext: 'dae',\n                data: res.data,\n                textures: res.textures,\n            };\n\n        }\n\n    }\n\n    _base64ToBuffer(str) {\n\n        const b = atob(str);\n        const buf = new Uint8Array(b.length);\n\n        for (var i = 0, l = buf.length; i < l; i++) {\n\n            buf[i] = b.charCodeAt(i);\n\n        }\n\n        return buf;\n\n    }\n\n    // Convert a texture to png image data\n    _imageToData(image, ext) {\n\n        this._canvas = this._canvas || document.createElement('canvas');\n        this._ctx = this._ctx || this._canvas.getContext('2d');\n\n        const canvas = this._canvas;\n        const ctx = this._ctx;\n\n        canvas.width = image.naturalWidth;\n        canvas.height = image.naturalHeight;\n\n        ctx.drawImage(image, 0, 0);\n\n        // Get the base64 encoded data\n        const base64data = canvas\n            .toDataURL(`image/${ ext }`, 1)\n            .replace(/^data:image\\/(png|jpg);base64,/, '');\n\n        // Convert to a uint8 array\n        return this._base64ToBuffer(base64data);\n\n    }\n\n    // Convert the urdf xml into a well-formatted, indented format\n    _format(urdf) {\n\n        var IS_END_TAG = /^<\\//;\n        var IS_SELF_CLOSING = /(\\?>$)|(\\/>$)/;\n        var HAS_TEXT = /<[^>]+>[^<]*<\\/[^<]+>/;\n\n        var pad = (ch, num) => (num > 0 ? ch + pad(ch, num - 1) : '');\n\n        var tagnum = 0;\n        return urdf\n            .match(/(<[^>]+>[^<]+<\\/[^<]+>)|(<[^>]+>)/g)\n            .map(tag => {\n\n                if (!HAS_TEXT.test(tag) && !IS_SELF_CLOSING.test(tag) && IS_END_TAG.test(tag)) {\n\n                    tagnum--;\n\n                }\n\n                var res = `${ pad('  ', tagnum) }${ tag }`;\n                if (!HAS_TEXT.test(tag) && !IS_SELF_CLOSING.test(tag) && !IS_END_TAG.test(tag)) {\n\n                    tagnum++;\n\n                }\n\n                return res;\n\n            })\n            .join('\\n');\n\n    }\n\n    // Remove any unnecessary joints and links that fixed and have identity transforms\n    _collapseLinks(urdf) {\n\n        console.warn('URDFExporter : The \"collapse\" functionality isn\\'t stable and my corrupt the structure of the URDF');\n\n        const xmlDoc = (new DOMParser()).parseFromString(urdf, 'text/xml');\n        const robottag = xmlDoc.children[0];\n\n        // cache the children as an array\n        const children = [...robottag.children];\n\n        // get the list of links indexed by name\n        const links = children.filter(t => t.tagName.toLowerCase() === 'link');\n        const joints = children.filter(t => t.tagName.toLowerCase() === 'joint');\n\n        // find the link\n        const root = links\n            .map(l => l.getAttribute('name'))\n            .filter(linkName => {\n\n                const childReferences = joints.filter(j => j.querySelector('child').getAttribute('link') === linkName);\n                return childReferences.length === 0;\n\n            })[0];\n\n        const linksMap = {};\n        links.forEach(l => linksMap[l.getAttribute('name')] = l);\n\n        // TODO: Do we need to traverse in reverse so as nodes are removed, they're taken into\n        // account in subsequent collapses? Order is important here.\n        joints.forEach(j => {\n\n            const origin = [...j.children].filter(t => t.tagName.toLowerCase() === 'origin')[0];\n            const type = j.getAttribute('type') || 'fixed';\n\n            // if the node is fixed and has an identity transform then we can remove it\n            const xyz = origin.getAttribute('xyz') || '0 0 0';\n            const rpy = origin.getAttribute('rpy') || '0 0 0';\n            if (type === 'fixed' && (!origin || (xyz === '0 0 0' && rpy === '0 0 0'))) {\n\n                const childName =\n                    [...j.children]\n                        .filter(t => t.tagName.toLowerCase() === 'child')[0]\n                        .getAttribute('link');\n\n                const parentName =\n                    [...j.children]\n                        .filter(t => t.tagName.toLowerCase() === 'parent')[0]\n                        .getAttribute('link');\n\n                // how many child joints reference the same joint as this parent\n                const parentsChildren =\n                    joints.filter(j2 =>\n                        [...j.children]\n                            .filter(t => t.tagName.toLowerCase() === 'parent')\n                            .filter(t => t.getAttribute('link') === parentName)\n                            .length !== 0\n                    ).length;\n\n                // collapse the node if\n                // 1. The link we'll be removing has no children so there will be no effect\n                // 2. The link has children (like a visual node) making it meaningful AND there are\n                // no other joints that reference this parent link, so we can move the meaningful\n                // information into there\n\n                // TODO: Consider just removing the parent node instead of the child node if the child\n                // node has children. We should just remove the least complicated link.\n                if (linksMap[parentName].children.length === 0 || (linksMap[childName].children.length !== 0 && parentsChildren === 1)) {\n\n                    if (linksMap[childName].children.length) {\n\n                        [...linksMap[childName].children].forEach(c => linksMap[parentName].appendChild(c));\n\n                    }\n\n                    // find joints that have this joint as the parent and move it to the parent\n                    joints.forEach(j2 =>\n                        [...j2.children]\n                            .filter(t => t.tagName.toLowerCase() === 'parent')\n                            .filter(t => t.getAttribute('link') === childName)\n                            .forEach(t => t.setAttribute('link', parentName))\n                    );\n\n                    // remove this joint from the robot\n                    robottag.removeChild(j);\n\n                }\n\n            }\n\n        });\n\n        // remove any links that arent referenced by the existing joints\n        [...robottag.children]\n            .filter(t => t.tagName.toLowerCase() === 'joint')\n            .forEach(j => {\n\n                const childName =\n                    [...j.children]\n                        .filter(t => t.tagName.toLowerCase() === 'child')[0]\n                        .getAttribute('link');\n\n                const parentName =\n                    [...j.children]\n                        .filter(t => t.tagName.toLowerCase() === 'parent')[0]\n                        .getAttribute('link');\n\n                delete linksMap[childName];\n                delete linksMap[parentName];\n\n            });\n\n        // the links remaining aren't being referenced by any\n        // joints and can be removed\n        Object\n            .keys(linksMap)\n            .filter(n => n !== root)\n            .forEach(n => robottag.removeChild(linksMap[n]));\n\n        return new XMLSerializer().serializeToString(xmlDoc.documentElement);\n\n    }\n\n    // Convert the object into a urdf and get the associated\n    // mesh and texture data\n    parse(object, jointfunc, options = {}) {\n\n        options = Object.assign({\n\n            createMeshCb: this._defaultMeshCallback.bind(this),\n            pathPrefix: './',\n            collapse: false,\n            meshFormat: 'dae',\n            robotName: object.name,\n\n        }, options);\n\n        const linksMap = new WeakMap(); // object > name\n        const texMap = new WeakMap(); // texture > image data\n        const meshes = []; // array of meshes info to save\n        const textures = []; // array of texture info to save\n\n        // used link and joint names\n        const linksNameMap = {};\n        const jointsNameMap = {};\n\n        // file contents\n        let urdf = `<robot name=\"${ options.robotName }\">`;\n\n        // use a custom travers function instead of Object3D.traverse so we\n        // can stop the traversal early if we have to.\n        const traverse = child => {\n\n            const linkName = this._makeNameUnique(child.name || `_link_`, linksNameMap);\n            linksNameMap[linkName] = true;\n            linksMap.set(child, linkName);\n\n            // Create the link tag\n            let joint = '';\n            let link = `<link name=\"${ linkName }\">`;\n            let isLeaf = false;\n\n            // Create the joint tag if it's not the root object that we're exporting\n            if (child !== object) {\n\n                const parentName = linksMap.get(child.parent);\n                const jointInfo = jointfunc(child, linkName, parentName) || {};\n                const { axis, type, name, limit } = jointInfo;\n                isLeaf = !!jointInfo.isLeaf;\n\n                const jointName = this._makeNameUnique(name || '_joint_', jointsNameMap);\n                jointsNameMap[jointName] = true;\n\n                joint = `<joint name=\"${ jointName }\" type=\"${ type || 'fixed' }\">`;\n                {\n\n                    const pos = child.position.toArray().join(' ');\n\n                    // URDF uses fixed-axis rotations, while THREE uses moving-axis rotations\n                    const euler = child.rotation.clone();\n                    euler.reorder('ZYX');\n\n                    // The last field of the array is the rotation order 'ZYX', so\n                    // remove that before saving\n                    const array = euler.toArray();\n                    array.pop();\n\n                    const rot = array.join(' ');\n\n                    joint += `<origin xyz=\"${ pos }\" rpy=\"${ rot }\" />`;\n\n                    joint += `<parent link=\"${ parentName }\" />`;\n\n                    joint += `<child link=\"${ linkName }\" />`;\n\n                    if (axis) {\n\n                        joint += `<axis xyz=\"${ axis.x } ${ axis.y } ${ axis.z }\" />`;\n\n                    }\n\n                    if (limit) {\n\n                        let limitNode = `<limit velocity=\"${ limit.velocity || 0 }\" effort=\"${ limit.effort || 0 }\"`;\n                        if (limit.lower != null) {\n\n                            limitNode += ` lower=\"${ limit.lower }\"`;\n\n                        }\n\n                        if (limit.upper != null) {\n\n                            limitNode += ` upper=\"${ limit.upper }\"`;\n\n                        }\n\n                        limitNode += ' ></limit>';\n                        joint += limitNode;\n\n                    }\n\n                }\n                joint += '</joint>';\n\n            }\n\n            // Try to add a mesh if this node is a mesh or the current\n            // link should be considered a leaf and traversal is stopped\n            if (child instanceof THREE.Mesh || isLeaf) {\n\n                // TODO: Some deduping should be happening here\n                // Issue #9\n                const meshInfo = options.createMeshCb(child, linkName, options.meshFormat);\n\n                if (meshInfo != null) {\n\n                    // put the meshes in the `mesh` directory and the\n                    // textures in the same directory.\n                    meshInfo.directory = 'meshes/';\n                    meshInfo.textures.forEach(t => {\n\n                        t.directory =\n                            `${ meshInfo.directory }${ t.directory || '' }`\n                                .replace(/\\\\/g, '/')\n                                .replace(/\\/+/g, '/');\n\n                    });\n\n                    meshes.push(meshInfo);\n                    if (meshInfo.textures) {\n\n                        textures.push(...meshInfo.textures);\n\n                    }\n\n                    // Create the visual node based on the meshInfo\n                    link += '<visual>';\n                    {\n\n                        link += '<origin xyz=\"0 0 0\" rpy=\"0 0 0\" />';\n\n                        link += '<geometry>';\n                        {\n\n                            const meshpath = this._normalizePackagePath(`${ options.pathPrefix }${ meshInfo.directory }${ meshInfo.name }.${ meshInfo.ext }`);\n                            link += `<mesh filename=\"${ meshpath }\" scale=\"${ child.scale.toArray().join(' ') }\" />`;\n\n                        }\n                        link += '</geometry>';\n\n                        if (meshInfo.material) {\n\n                            link += '<material name=\"\">';\n                            {\n\n                                if (meshInfo.material.color || meshInfo.material.opacity != null) {\n\n                                    const col = meshInfo.material.color;\n                                    const opacity = meshInfo.material.opacity;\n\n                                    const colStr = col ? `${ col.r } ${ col.g } ${ col.b }` : '1 1 1';\n                                    const opacityStr = opacity != null ? opacity : 1;\n\n                                    const rgba = `${ colStr } ${ opacityStr }`;\n\n                                    link += `<color rgba=\"${ rgba }\" />`;\n\n                                }\n\n                                if (meshInfo.material.texture) {\n\n                                    let texInfo = texMap.get(meshInfo.material.texture);\n                                    if (!texInfo) {\n\n                                        const ext = 'png';\n                                        texInfo = {\n                                            directory: 'textures/',\n                                            name: meshInfo.name,\n                                            ext,\n                                            data: this._imageToData(meshInfo.material.texture.image, ext),\n                                            original: meshInfo.material.texture,\n                                        };\n                                        texMap.set(meshInfo.material.texture, texInfo);\n                                        textures.push(texInfo);\n\n                                    }\n\n                                    const texpath = this._normalizePackagePath(`${ options.pathPrefix }textures/${ texInfo.name }.${ texInfo.ext }`);\n                                    link += `<texture filename=\"${ texpath }\" />`;\n\n                                }\n\n                            }\n                            link += '</material>';\n\n                        }\n\n                    }\n                    link += '</visual>';\n\n                }\n\n                // TODO: add matching collision\n\n            }\n\n            link += '</link>';\n\n            urdf += link;\n            urdf += joint;\n\n            // traverse all the children if this link\n            // isn't considered a leaf\n            if (!isLeaf) {\n\n                child.children.forEach(c => traverse(c));\n\n            }\n\n        };\n\n        // traverse the object\n        traverse(object);\n\n        urdf += '</robot>';\n\n        // format the final output\n        const finalurdf = this._format(options.collapse ? this._collapseLinks(urdf) : urdf);\n\n        return { data: finalurdf, meshes, textures };\n\n    }\n\n};\n"],"names":["STLExporter","ColladaExporter","THREE.Mesh"],"mappings":"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"}